{"remainingRequest":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\babel-loader\\lib\\index.js!D:\\Program Files\\SB\\web\\admin-web\\src\\api\\http.js","dependencies":[{"path":"D:\\Program Files\\SB\\web\\admin-web\\src\\api\\http.js","mtime":1555669802795},{"path":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"D:\\\\Program Files\\\\SB\\\\web\\\\admin-web\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _Promise from \"D:\\\\Program Files\\\\SB\\\\web\\\\admin-web\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport axios from 'axios';\nimport qs from 'qs';\nimport { Message } from 'element-ui';\nimport store from '@/store';\nimport router from '@/router';\nimport err_msg from './err_msg'; //请求超时 10ms\n\naxios.defaults.timeout = 10000; //它会自动判断环境 取决于 nmp run (sreve,build) \n//踩坑 baseURL(URL全大写) 不要写成 baseUrl\n\naxios.defaults.baseURL = process.env.VUE_APP_URL;\n\naxios.get = function (url, params) {\n  return axios.request({\n    url: url,\n    method: 'get',\n    params: params || {}\n  });\n}; //处理客户端请求\n\n\naxios.interceptors.request.use(function (config) {\n  //qs 可以将{username:\"oldkeyset\",password:\"123456\"} 转换为 usernmae=oldkeyset&password=123456\n  console.log(config.data.username); // config.params = qs.stringify(config.params); \n  //get 请求 一般用来获取数据 默认headers 默认为空\n\n  var peerid = store.state.auth_info.peerid;\n  var sessionid = store.state.auth_info.sessionid;\n  var username = store.state.auth_info.username;\n\n  if (config.method === 'get') {\n    //可以根据项目需求在这里添加 额外参数 优先传递过来的参数\n    config.params.peerid = peerid || config.params.peerid;\n    config.params.sessionid = sessionid || config.params.sessionid;\n    config.params.username = username || config.params.username;\n  } else if (config.method === 'post') {\n    config.data.peerid = peerid || config.data.peerid;\n    config.data.sessionid = sessionid || config.data.sessionid;\n    config.data.username = username || config.data.username;\n    config.data = qs.stringify(config.data);\n    config.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n  }\n\n  console.log(config);\n  return config;\n}, function (err) {\n  return _Promise.reject(err);\n}); //处理服务端的返回的结果\n\naxios.interceptors.response.use(function (response) {\n  //data 主要是服务端封装的返回结果\n  //我封装的是 \n  //status: 状态码\n  //msg 单条的消息 或者错误消息\n  //data Object类型 一般放返回的是 对象或list 或 map\n  var data = response.data; //200就为正常的 可以返回data.data\n\n  if (data.status !== 200) {\n    //2051 登录态过期 2052 账号被挤出(异地登录) 4101信息过期\n    if (data.status === 2051 || data.status === 2052 || data.status === 4101 || data.status === 4005) {\n      //跳转到登录页\n      router.replace({\n        path: '/'\n      });\n    } else {\n      //错误处理\n      try {\n        //获取baseURL 后面的地址 \n        //其它异常进来这里适配\n        //let reqUrl = response.config.url.slice(process.env.VUE_APP_URL.length, response.config.url.length).split('/');\n        //用户登录后的操作 store.getters.config_err_info从数据库获取error信息,统一适配\n        //字段为请求路径  对应错误信息\n        //未登陆直接走catch\n        var errInfo = err_msg; //store.getters.config_err_info \n\n        var resData = JSON.parse(_JSON$stringify(data)); // for (let i = 0; i < reqUrl.length; i++) {\n        //   const e = reqUrl[i]\n        //   errInfo = errInfo[e]\n        // }\n\n        resData.msg = errInfo[resData.msg] || resData.msg; //resData 主要将msg 修改为用户能够识别的提示信息 其它信息不变\n\n        return _Promise.reject(resData);\n      } catch (error) {\n        //try中人为异常会进这里\n        Message({\n          showClose: true,\n          message: err_msg[data.msg] || data.msg,\n          type: 'error'\n        });\n        return _Promise.reject(data);\n      }\n    }\n  }\n\n  return data.data;\n}, function (error) {\n  //这里拦截到的一般是http默认状态码  系统异常  例如服务器挂了\n  return _Promise.reject({\n    msg: error.response.status || error.status\n  });\n});\nexport default axios;",{"version":3,"sources":["D:\\Program Files\\SB\\web\\admin-web\\src\\api\\http.js"],"names":["axios","qs","Message","store","router","err_msg","defaults","timeout","baseURL","process","env","VUE_APP_URL","get","url","params","request","method","interceptors","use","config","console","log","data","username","peerid","state","auth_info","sessionid","stringify","headers","err","reject","response","status","replace","path","errInfo","resData","JSON","parse","msg","error","showClose","message","type"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport qs from 'qs';\r\nimport { Message } from 'element-ui'\r\nimport store from '@/store'\r\nimport router from '@/router'\r\nimport err_msg from './err_msg';\r\n//请求超时 10ms\r\naxios.defaults.timeout = 10000;\r\n//它会自动判断环境 取决于 nmp run (sreve,build) \r\n//踩坑 baseURL(URL全大写) 不要写成 baseUrl\r\naxios.defaults.baseURL = process.env.VUE_APP_URL;\r\n\r\n\r\naxios.get = (url, params) => {\r\n  return axios.request({\r\n    url: url,\r\n    method: 'get',\r\n    params: params || {}\r\n  });\r\n};\r\n//处理客户端请求\r\naxios.interceptors.request.use(config => {\r\n  //qs 可以将{username:\"oldkeyset\",password:\"123456\"} 转换为 usernmae=oldkeyset&password=123456\r\n  console.log(config.data.username);\r\n  // config.params = qs.stringify(config.params); \r\n  //get 请求 一般用来获取数据 默认headers 默认为空\r\n  let peerid = store.state.auth_info.peerid\r\n  let sessionid = store.state.auth_info.sessionid\r\n  let username = store.state.auth_info.username\r\n  if (config.method === 'get') {\r\n    //可以根据项目需求在这里添加 额外参数 优先传递过来的参数\r\n    config.params.peerid = peerid || config.params.peerid\r\n    config.params.sessionid = sessionid || config.params.sessionid\r\n    config.params.username = username || config.params.username\r\n  } else if (config.method === 'post') {\r\n\r\n    config.data.peerid = peerid||config.data.peerid\r\n    config.data.sessionid = sessionid || config.data.sessionid\r\n    config.data.username = username || config.data.username\r\n    config.data = qs.stringify(config.data);\r\n    config.headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\r\n  }\r\n  console.log(config);\r\n  return config;\r\n},\r\n  err => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n//处理服务端的返回的结果\r\naxios.interceptors.response.use(response => {\r\n  //data 主要是服务端封装的返回结果\r\n  //我封装的是 \r\n  //status: 状态码\r\n  //msg 单条的消息 或者错误消息\r\n  //data Object类型 一般放返回的是 对象或list 或 map\r\n  let data = response.data; //200就为正常的 可以返回data.data\r\n  if (data.status !== 200) {\r\n    //2051 登录态过期 2052 账号被挤出(异地登录) 4101信息过期\r\n    if (data.status === 2051 || data.status === 2052 || data.status === 4101 || data.status === 4005) {\r\n      //跳转到登录页\r\n      router.replace({\r\n        path: '/'\r\n      })\r\n    } else {\r\n      //错误处理\r\n      try {\r\n        //获取baseURL 后面的地址 \r\n        //其它异常进来这里适配\r\n        //let reqUrl = response.config.url.slice(process.env.VUE_APP_URL.length, response.config.url.length).split('/');\r\n        //用户登录后的操作 store.getters.config_err_info从数据库获取error信息,统一适配\r\n        //字段为请求路径  对应错误信息\r\n        //未登陆直接走catch\r\n        let errInfo = err_msg;//store.getters.config_err_info \r\n\r\n        let resData = JSON.parse(JSON.stringify(data));\r\n        // for (let i = 0; i < reqUrl.length; i++) {\r\n        //   const e = reqUrl[i]\r\n        //   errInfo = errInfo[e]\r\n        // }\r\n        resData.msg = errInfo[resData.msg] || resData.msg;\r\n        //resData 主要将msg 修改为用户能够识别的提示信息 其它信息不变\r\n        return Promise.reject(resData);\r\n      } catch (error) {\r\n        //try中人为异常会进这里\r\n        Message({\r\n          showClose: true,\r\n          message: err_msg[data.msg] || data.msg,\r\n          type: 'error'\r\n        });\r\n        return Promise.reject(data);\r\n      }\r\n    }\r\n  }\r\n  return data.data;\r\n},\r\n  error => {\r\n    //这里拦截到的一般是http默认状态码  系统异常  例如服务器挂了\r\n    return Promise.reject({\r\n      msg: error.response.status || error.status\r\n    })\r\n  }\r\n);\r\n\r\nexport default axios;\r\n"]}]}