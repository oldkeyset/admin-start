{"remainingRequest":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program Files\\SB\\web\\admin-web\\src\\components\\Excel.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Program Files\\SB\\web\\admin-web\\src\\components\\Excel.vue","mtime":1555572475550},{"path":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program Files\\SB\\web\\admin-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// 引入xlsx\nvar XLSX = require('xlsx')\nexport default {\n  name: 'Index',\n  data() {\n    return {\n      fullscreenLoading: false, // 加载中\n      imFile: '', // 导入文件el\n      outFile: '',  // 导出文件el\n      errorDialog: false, // 错误信息弹窗\n      errorMsg: '', // 错误信息内容\n      excelData: [  // 测试数据\n        {\n         id:1,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\n        },\n        {\n         id:2,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\n        },\n        {\n         id:3,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\n        },\n        {\n         id:4,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\n        },\n        {\n         id:5,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\n        }\n\n      ]\n    }\n  },\n  mounted() {\n    this.imFile = document.getElementById('imFile')\n    this.outFile = document.getElementById('downlink')\n  },\n  methods: {\n    uploadFile: function () { // 点击导入按钮\n      this.imFile.click()\n    },\n    downloadFile: function (rs) { // 点击导出按钮\n      let data = [{}]\n      for (let k in rs[0]) {\n        data[0][k] = k\n      }\n      data = data.concat(rs)\n      this.downloadExl(data, '菜单');\n    },\n    importFile: function () { // 导入excel\n      this.fullscreenLoading = true\n      let obj = this.imFile\n      if (!obj.files) {\n        this.fullscreenLoading = false\n        return\n      }\n      var f = obj.files[0]\n      var reader = new FileReader()\n      let $t = this\n      reader.onload = function (e) {\n        var data = e.target.result\n        if ($t.rABS) {\n          $t.wb = XLSX.read(btoa(this.fixdata(data)), {  // 手动转化\n            type: 'base64'\n          })\n        } else {\n          $t.wb = XLSX.read(data, {\n            type: 'binary'\n          })\n        }\n        let json = XLSX.utils.sheet_to_json($t.wb.Sheets[$t.wb.SheetNames[0]])\n        $t.dealFile($t.analyzeData(json)) // analyzeData: 解析导入数据\n      }\n      if (this.rABS) {\n        reader.readAsArrayBuffer(f)\n      } else {\n        reader.readAsBinaryString(f)\n      }\n    },\n    downloadExl: function (json, downName, type) {  // 导出到excel\n      let keyMap = [] // 获取键\n      for (let k in json[0]) {\n        keyMap.push(k)\n      }\n      let tmpdata = [] // 用来保存转换好的json\n      json.map((v, i) => keyMap.map((k, j) => Object.assign({}, {\n        v: v[k],\n        position: (j > 25 ? this.getCharCol(j) : String.fromCharCode(65 + j)) + (i + 1)\n      }))).reduce((prev, next) => prev.concat(next)).forEach(function (v) {\n        tmpdata[v.position] = {\n          v: v.v\n        }\n      })\n      let outputPos = Object.keys(tmpdata)  // 设置区域,比如表格从A1到D10\n      let tmpWB = {\n        SheetNames: ['mySheet'], // 保存的表标题\n        Sheets: {\n          'mySheet': Object.assign({},\n            tmpdata, // 内容\n            {\n              '!ref': outputPos[0] + ':' + outputPos[outputPos.length - 1] // 设置填充区域\n            })\n        }\n      }\n      let tmpDown = new Blob([this.s2ab(XLSX.write(tmpWB,\n        { bookType: (type === undefined ? 'xlsx' : type), bookSST: false, type: 'binary' } // 这里的数据是用来定义导出的格式类型\n      ))], {\n          type: ''\n        })  // 创建二进制对象写入转换好的字节流\n      var href = URL.createObjectURL(tmpDown)  // 创建对象超链接\n      this.outFile.download = downName + '.xlsx'  // 下载名称\n      this.outFile.href = href  // 绑定a标签\n      this.outFile.click()  // 模拟点击实现下载\n      setTimeout(function () {  // 延时释放\n        URL.revokeObjectURL(tmpDown) // 用URL.revokeObjectURL()来释放这个object URL\n      }, 100)\n    },\n    analyzeData: function (data) {  // 此处可以解析导入数据\n      return data\n    },\n    dealFile: function (data) {   // 处理导入的数据\n      this.imFile.value = ''\n      this.fullscreenLoading = false\n      if (data.length <= 0) {\n        this.errorDialog = true\n        this.errorMsg = '请导入正确信息'\n      } else {\n        this.excelData = data\n        console.log(this.excelData);\n      }\n    },\n    s2ab: function (s) { // 字符串转字符流\n      var buf = new ArrayBuffer(s.length)\n      var view = new Uint8Array(buf)\n      for (var i = 0; i !== s.length; ++i) {\n        view[i] = s.charCodeAt(i) & 0xFF\n      }\n      return buf\n    },\n    getCharCol: function (n) { // 将指定的自然数转换为26进制表示。映射关系：[0-25] -> [A-Z]。\n      let s = ''\n      let m = 0\n      while (n > 0) {\n        m = n % 26 + 1\n        s = String.fromCharCode(m + 64) + s\n        n = (n - m) / 26\n      }\n      return s\n    },\n    fixdata: function (data) {  // 文件流转BinaryString\n      var o = ''\n      var l = 0\n      var w = 10240\n      for (; l < data.byteLength / w; ++l) {\n        o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))\n      }\n      o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))\n      return o\n    }\n  }\n}\n",{"version":3,"sources":["Excel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Excel.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"index\" v-loading.fullscreen.lock=\"fullscreenLoading\" element-loading-text=\"拼命加载中...\">\r\n    <input type=\"file\" @change=\"importFile(this)\" id=\"imFile\" style=\"display: none\"\r\n      accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\" />\r\n    <a id=\"downlink\"></a>\r\n    <el-button class=\"button\" @click=\"uploadFile()\">导入</el-button>\r\n    <el-button class=\"button\" @click=\"downloadFile(excelData)\">导出</el-button>\r\n    <!--错误信息提示-->\r\n    <el-dialog title=\"提示\" v-model=\"errorDialog\" size=\"tiny\">\r\n      <span>{{errorMsg}}</span>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"errorDialog=false\">确认</el-button>\r\n      </span>\r\n    </el-dialog>\r\n    <!--展示导入信息-->\r\n\r\n    <el-table :data=\"excelData\" border style=\"width: 100%\">\r\n        <el-table-column prop=\"id\" label=\"编号\" width=\"180\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"name\" label=\"菜品名称\" width=\"180\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"size\" label=\"大小\" width=\"180\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"taste\" label=\"辣的级别\" width=\"180\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"price\" label=\"价格\" width=\"300\">\r\n        </el-table-column>\r\n        <el-table-column prop=\"remain\" label=\"库存\" width=\"300\">\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button type=\"success\" size=\"small\" >详情</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  // 引入xlsx\r\n  var XLSX = require('xlsx')\r\n  export default {\r\n    name: 'Index',\r\n    data() {\r\n      return {\r\n        fullscreenLoading: false, // 加载中\r\n        imFile: '', // 导入文件el\r\n        outFile: '',  // 导出文件el\r\n        errorDialog: false, // 错误信息弹窗\r\n        errorMsg: '', // 错误信息内容\r\n        excelData: [  // 测试数据\r\n          {\r\n           id:1,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\r\n          },\r\n          {\r\n           id:2,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\r\n          },\r\n          {\r\n           id:3,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\r\n          },\r\n          {\r\n           id:4,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\r\n          },\r\n          {\r\n           id:5,name: '红烧鱼', size: '大', taste: '微辣', price: '40', remain: '100'\r\n          }\r\n\r\n        ]\r\n      }\r\n    },\r\n    mounted() {\r\n      this.imFile = document.getElementById('imFile')\r\n      this.outFile = document.getElementById('downlink')\r\n    },\r\n    methods: {\r\n      uploadFile: function () { // 点击导入按钮\r\n        this.imFile.click()\r\n      },\r\n      downloadFile: function (rs) { // 点击导出按钮\r\n        let data = [{}]\r\n        for (let k in rs[0]) {\r\n          data[0][k] = k\r\n        }\r\n        data = data.concat(rs)\r\n        this.downloadExl(data, '菜单');\r\n      },\r\n      importFile: function () { // 导入excel\r\n        this.fullscreenLoading = true\r\n        let obj = this.imFile\r\n        if (!obj.files) {\r\n          this.fullscreenLoading = false\r\n          return\r\n        }\r\n        var f = obj.files[0]\r\n        var reader = new FileReader()\r\n        let $t = this\r\n        reader.onload = function (e) {\r\n          var data = e.target.result\r\n          if ($t.rABS) {\r\n            $t.wb = XLSX.read(btoa(this.fixdata(data)), {  // 手动转化\r\n              type: 'base64'\r\n            })\r\n          } else {\r\n            $t.wb = XLSX.read(data, {\r\n              type: 'binary'\r\n            })\r\n          }\r\n          let json = XLSX.utils.sheet_to_json($t.wb.Sheets[$t.wb.SheetNames[0]])\r\n          $t.dealFile($t.analyzeData(json)) // analyzeData: 解析导入数据\r\n        }\r\n        if (this.rABS) {\r\n          reader.readAsArrayBuffer(f)\r\n        } else {\r\n          reader.readAsBinaryString(f)\r\n        }\r\n      },\r\n      downloadExl: function (json, downName, type) {  // 导出到excel\r\n        let keyMap = [] // 获取键\r\n        for (let k in json[0]) {\r\n          keyMap.push(k)\r\n        }\r\n        let tmpdata = [] // 用来保存转换好的json\r\n        json.map((v, i) => keyMap.map((k, j) => Object.assign({}, {\r\n          v: v[k],\r\n          position: (j > 25 ? this.getCharCol(j) : String.fromCharCode(65 + j)) + (i + 1)\r\n        }))).reduce((prev, next) => prev.concat(next)).forEach(function (v) {\r\n          tmpdata[v.position] = {\r\n            v: v.v\r\n          }\r\n        })\r\n        let outputPos = Object.keys(tmpdata)  // 设置区域,比如表格从A1到D10\r\n        let tmpWB = {\r\n          SheetNames: ['mySheet'], // 保存的表标题\r\n          Sheets: {\r\n            'mySheet': Object.assign({},\r\n              tmpdata, // 内容\r\n              {\r\n                '!ref': outputPos[0] + ':' + outputPos[outputPos.length - 1] // 设置填充区域\r\n              })\r\n          }\r\n        }\r\n        let tmpDown = new Blob([this.s2ab(XLSX.write(tmpWB,\r\n          { bookType: (type === undefined ? 'xlsx' : type), bookSST: false, type: 'binary' } // 这里的数据是用来定义导出的格式类型\r\n        ))], {\r\n            type: ''\r\n          })  // 创建二进制对象写入转换好的字节流\r\n        var href = URL.createObjectURL(tmpDown)  // 创建对象超链接\r\n        this.outFile.download = downName + '.xlsx'  // 下载名称\r\n        this.outFile.href = href  // 绑定a标签\r\n        this.outFile.click()  // 模拟点击实现下载\r\n        setTimeout(function () {  // 延时释放\r\n          URL.revokeObjectURL(tmpDown) // 用URL.revokeObjectURL()来释放这个object URL\r\n        }, 100)\r\n      },\r\n      analyzeData: function (data) {  // 此处可以解析导入数据\r\n        return data\r\n      },\r\n      dealFile: function (data) {   // 处理导入的数据\r\n        this.imFile.value = ''\r\n        this.fullscreenLoading = false\r\n        if (data.length <= 0) {\r\n          this.errorDialog = true\r\n          this.errorMsg = '请导入正确信息'\r\n        } else {\r\n          this.excelData = data\r\n          console.log(this.excelData);\r\n        }\r\n      },\r\n      s2ab: function (s) { // 字符串转字符流\r\n        var buf = new ArrayBuffer(s.length)\r\n        var view = new Uint8Array(buf)\r\n        for (var i = 0; i !== s.length; ++i) {\r\n          view[i] = s.charCodeAt(i) & 0xFF\r\n        }\r\n        return buf\r\n      },\r\n      getCharCol: function (n) { // 将指定的自然数转换为26进制表示。映射关系：[0-25] -> [A-Z]。\r\n        let s = ''\r\n        let m = 0\r\n        while (n > 0) {\r\n          m = n % 26 + 1\r\n          s = String.fromCharCode(m + 64) + s\r\n          n = (n - m) / 26\r\n        }\r\n        return s\r\n      },\r\n      fixdata: function (data) {  // 文件流转BinaryString\r\n        var o = ''\r\n        var l = 0\r\n        var w = 10240\r\n        for (; l < data.byteLength / w; ++l) {\r\n          o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)))\r\n        }\r\n        o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)))\r\n        return o\r\n      }\r\n    }\r\n  }\r\n</script>"]}]}